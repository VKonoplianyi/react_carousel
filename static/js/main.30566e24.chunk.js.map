{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","itemWidth","frameSize","step","animationDuration","infinite","useState","scrollPosition","setScrollPosition","lastImagePosition","length","isDisabledNext","isDisabledPrev","carouselStyle","width","carouselImageStyle","transform","transition","className","style","map","image","index","src","alt","type","onClick","prev","disabled","INFINITE","App","state","handleInputChange","event","target","name","value","setState","prevState","this","action","method","htmlFor","id","min","max","onChange","checked","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30566e24.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[],\n  itemWidth: number,\n  frameSize: number,\n  step: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  itemWidth,\n  frameSize,\n  step,\n  animationDuration,\n  infinite,\n}) => {\n  const [scrollPosition, setScrollPosition] = useState(0);\n\n  const lastImagePosition = images.length - frameSize;\n  const isDisabledNext = scrollPosition === lastImagePosition && !infinite;\n  const isDisabledPrev = scrollPosition === 0 && !infinite;\n\n  const carouselStyle = {\n    width: `${itemWidth * frameSize}px`,\n  };\n\n  const carouselImageStyle = {\n    transform: `translateX(${-(scrollPosition * itemWidth)}px)`,\n    transition: `transform ${animationDuration}ms ease`,\n  };\n\n  const handlePrevButton = () => {\n    if (scrollPosition > 0) {\n      setScrollPosition(prev => (\n        prev - step >= 0\n          ? prev - step\n          : 0\n      ));\n    } else {\n      setScrollPosition(lastImagePosition);\n    }\n  };\n\n  const handleNextButton = () => {\n    if (scrollPosition < lastImagePosition) {\n      setScrollPosition(prev => (\n        prev + step <= lastImagePosition\n          ? prev + step\n          : lastImagePosition\n      ));\n    } else {\n      setScrollPosition(0);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"Carousel\" style={carouselStyle}>\n        <ul className=\"Carousel__list\">\n          {images.map((image, index) => (\n            <li\n              key={image}\n              className=\"Carousel__item\"\n              style={carouselImageStyle}\n            >\n              <img\n                src={image}\n                alt={`${index + 1}`}\n                width={itemWidth}\n              />\n            </li>\n          ))}\n        </ul>\n\n        <div className=\"Carousel__buttons\">\n          <button\n            type=\"button\"\n            onClick={handlePrevButton}\n            disabled={isDisabledPrev}\n          >\n            Prev\n          </button>\n          <button\n            type=\"button\"\n            data-cy=\"next\"\n            onClick={handleNextButton}\n            disabled={isDisabledNext}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport Carousel from './components/Carousel';\nimport './App.scss';\n\ninterface State {\n  images: string[];\n  itemWidth: number,\n  frameSize: number,\n  step: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nconst INFINITE = 'infinite';\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    if (name === INFINITE) {\n      this.setState((prevState) => ({ infinite: !prevState.infinite }));\n\n      return;\n    }\n\n    this.setState((prevState) => ({\n      ...prevState,\n      [name]: +value,\n    }));\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <form\n          className=\"form\"\n          action=\"#\"\n          method=\"post\"\n        >\n          <label htmlFor=\"itemId\" className=\"form__label\">\n            Item Width:&nbsp;\n\n            <input\n              type=\"number\"\n              className=\"form__input\"\n              name=\"itemWidth\"\n              id=\"itemId\"\n              min={130}\n              max={330}\n              step={20}\n              value={itemWidth}\n              onChange={this.handleInputChange}\n            />\n          </label>\n\n          <label htmlFor=\"frameId\" className=\"form__label\">\n            Frame Size:&nbsp;\n\n            <input\n              type=\"number\"\n              className=\"form__input\"\n              name=\"frameSize\"\n              id=\"frameId\"\n              min={1}\n              max={images.length}\n              value={frameSize}\n              onChange={this.handleInputChange}\n            />\n          </label>\n\n          <label htmlFor=\"stepId\" className=\"form__label\">\n            Step:&nbsp;\n\n            <input\n              type=\"number\"\n              className=\"form__input\"\n              name=\"step\"\n              id=\"stepId\"\n              min={1}\n              value={step}\n              onChange={this.handleInputChange}\n            />\n          </label>\n\n          <label htmlFor=\"animationDurationId\" className=\"form__label\">\n            Animation Duration:&nbsp;\n\n            <input\n              type=\"number\"\n              className=\"form__input\"\n              name=\"animationDuration\"\n              id=\"animationDurationId\"\n              min={0}\n              max={8000}\n              step={500}\n              value={animationDuration}\n              onChange={this.handleInputChange}\n            />\n          </label>\n\n          <label htmlFor=\"infiniteId\" className=\"form__label\">\n            Infinite:&nbsp;\n\n            <input\n              type=\"checkbox\"\n              className=\"form__input form__input_checkbox\"\n              name={INFINITE}\n              id=\"infiniteId\"\n              checked={infinite}\n              onChange={this.handleInputChange}\n            />\n          </label>\n        </form>\n\n        <Carousel\n          images={images}\n          itemWidth={itemWidth}\n          frameSize={frameSize}\n          step={step}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}